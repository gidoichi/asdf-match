#!/bin/sh

set -eu
PARENT="$(d=${0%/*}/; [ "_$d" = "_$0/" ] && d='./'; cd "$d."; pwd)"
export ASDFMATCH_DESIRED_VER_FUNC_KUBECTL="${PARENT}/../plugins/kubectl_desired_version.sh"

DEFAULT_LOG_LEVEL=info

loglevel_to_ordinal_scale() {
    [ $# -ne 1 ] && return 1
    l=$1
    case "$l" in
        notice) l=1 ;;
        info)   l=2 ;;
        debug)  l=3 ;;
        *)      return 1 ;;
    esac
    printf '%d' "$l"
}

debug() {
    level=0
    debug=true
    stderr=false

    while :; do
        case "${1:-}" in
            --) shift; break;;
            --level=*)
                level=$(loglevel_to_ordinal_scale "${1#--level=}")
                shift
                if [ "$level" -gt "$LOG_LEVEL" ]; then
                    debug=false
                fi
                ;;
            -s)
                stderr=true
                shift
                ;;
            *)  break;;
        esac
    done
    if [ "$debug" != 'true' ]; then
        stderr=false
    fi

    [ "$debug" = 'true' ] && (PS4=''; set -x; : "$@")
    if [ "$stderr" = 'true' ]; then
        res=$("$@")
        ret=$?
        if [ -n "$res" ]; then
            printf '%s\n' "$res" >&2
            printf '%s\n' "$res"
        fi
        return "$ret"
    else
        "$@"
        return
    fi
}

to_upper_snake_case() {
    tr 'a-z-' 'A-Z_' | grep '^[A-Z_]*$'
}

current_version() {
    plugin=$1
    PLUGIN=$(printf '%s' "$plugin" | to_upper_snake_case)
    ASDFMATCH_CURRENT_VER_FUNC='"${ASDFMATCH_CURRENT_VER_FUNC_'"$PLUGIN"'}"'
    if (eval : "$ASDFMATCH_CURRENT_VER_FUNC" 2>/dev/null); then
        eval debug --level=debug -s "$ASDFMATCH_CURRENT_VER_FUNC"
    else
        current=$(debug --level=info -s asdf current --no-header "$plugin")
        printf '%s' "$current" | awk '{print $2}'
    fi
}

desired_version() {
    plugin=$1
    PLUGIN=$(printf '%s' "$plugin" | to_upper_snake_case)
    ASDFMATCH_DESIRED_VER_FUNC='"${ASDFMATCH_DESIRED_VER_FUNC_'"$PLUGIN"'}"'
    eval debug --level=info -s "$ASDFMATCH_DESIRED_VER_FUNC"
}

use() {
    plugin=$1
    version=$2
    if ! debug --level=debug -s asdf current "$plugin" >/dev/null; then
        debug --level=notice asdf plugin add "$package"
    fi
    if ! debug --level=debug -s asdf list "$plugin" "$version" >/dev/null; then
        debug --level=notice asdf install "$package" "$version"
    fi
    debug --level=notice asdf set --home "$package" "$version"
}

LOG_LEVEL=$(loglevel_to_ordinal_scale "$DEFAULT_LOG_LEVEL")
while :; do
    case "${1:-}" in
        --) shift; break;;
        --log=*)
            LOG_LEVEL=$(loglevel_to_ordinal_scale "${1#--log=}")
            shift
            ;;
        *)  break;;
    esac
done

package=$1
desired=$(desired_version "$package")
current=$(current_version "$package")
if [ "$current" = "$desired" ]; then
    exit
fi

use "$package" "$desired"
current=$(current_version "$package")
test "$current" = "$desired"
